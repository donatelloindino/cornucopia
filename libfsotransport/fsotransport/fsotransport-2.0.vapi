/* fsotransport-2.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "FsoFramework", lower_case_cprefix = "fso_framework_")]
namespace FsoFramework {
	[CCode (cheader_filename = "fsotransport.h")]
	public class BaseTransport : FsoFramework.Transport {
		protected GLib.ByteArray buffer;
		protected int fd;
		protected bool hard;
		protected FsoFramework.TransportHupFunc hupfunc;
		protected FsoFramework.Logger logger;
		protected string name;
		protected bool raw;
		protected FsoFramework.TransportReadFunc readfunc;
		protected uint speed;
		public BaseTransport (string name, uint speed = 0, bool raw = true, bool hard = true);
		public bool actionCallback (GLib.IOChannel source, GLib.IOCondition condition);
		public override void close ();
		public override void freeze ();
		public override void getDelegates (out FsoFramework.TransportReadFunc? readfun, out FsoFramework.TransportHupFunc? hupfun);
		public override string getName ();
		public override bool isOpen ();
		public override bool open ();
		public override int read (void* data, int len);
		public virtual string repr ();
		protected void restartWriter ();
		public override void setDelegates (FsoFramework.TransportReadFunc? readfunc, FsoFramework.TransportHupFunc? hupfunc);
		public override void setPriorities (int rp, int wp);
		public override void thaw ();
		public override int write (void* data, int len);
		public bool writeCallback (GLib.IOChannel source, GLib.IOCondition condition);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class PtyTransport : FsoFramework.BaseTransport {
		public PtyTransport ();
		public override string getName ();
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class SerialTransport : FsoFramework.BaseTransport {
		public SerialTransport (string portname, uint portspeed, bool raw = true, bool hard = true);
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class SocketTransport : FsoFramework.BaseTransport {
		public SocketTransport ();
		public override string getName ();
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public abstract class Transport : GLib.Object {
		public Transport ();
		public abstract void close ();
		public static FsoFramework.Transport? create (string type, string name = "", uint speed = 0, bool raw = true, bool hard = true);
		public abstract void freeze ();
		public abstract void getDelegates (out FsoFramework.TransportReadFunc? readfun, out FsoFramework.TransportHupFunc? hupfun);
		public abstract string getName ();
		public abstract bool isOpen ();
		public abstract bool open ();
		public abstract int read (void* data, int len);
		public abstract void setDelegates (FsoFramework.TransportReadFunc? readfunc, FsoFramework.TransportHupFunc? hupfunc);
		public abstract void setPriorities (int rp, int wp);
		public abstract void thaw ();
		public abstract int write (void* data, int length);
	}
	[CCode (cprefix = "FSO_FRAMEWORK_TRANSPORT_STATE_", cheader_filename = "fsotransport.h")]
	public enum TransportState {
		CLOSED,
		OPEN,
		ALIVE,
		FROZEN,
		DEAD
	}
	[CCode (cprefix = "FSO_FRAMEWORK_TRANSPORT_ERROR_", cheader_filename = "fsotransport.h")]
	public errordomain TransportError {
		UNABLE_TO_OPEN,
		UNABLE_TO_WRITE,
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate void TransportHupFunc (FsoFramework.Transport transport);
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate void TransportReadFunc (FsoFramework.Transport transport);
}
